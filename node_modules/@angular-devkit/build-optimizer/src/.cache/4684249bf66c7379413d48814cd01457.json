{"remainingRequest":"/var/www/html/todo/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/var/www/html/todo/node_modules/@ng-bootstrap/ng-bootstrap/util/popup.js","dependencies":[{"path":"/var/www/html/todo/node_modules/@ng-bootstrap/ng-bootstrap/util/popup.js","mtime":1520593588000},{"path":"/var/www/html/todo/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/var/www/html/todo/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { TemplateRef } from '@angular/core';\nvar ContentRef = /*@__PURE__*/ (function () {\n    function ContentRef(nodes, viewRef, componentRef) {\n        this.nodes = nodes;\n        this.viewRef = viewRef;\n        this.componentRef = componentRef;\n    }\n    return ContentRef;\n}());\nexport { ContentRef };\nvar PopupService = /*@__PURE__*/ (function () {\n    function PopupService(type, _injector, _viewContainerRef, _renderer, componentFactoryResolver) {\n        this._injector = _injector;\n        this._viewContainerRef = _viewContainerRef;\n        this._renderer = _renderer;\n        this._windowFactory = componentFactoryResolver.resolveComponentFactory(type);\n    }\n    PopupService.prototype.open = function (content, context) {\n        if (!this._windowRef) {\n            this._contentRef = this._getContentRef(content, context);\n            this._windowRef =\n                this._viewContainerRef.createComponent(this._windowFactory, 0, this._injector, this._contentRef.nodes);\n        }\n        return this._windowRef;\n    };\n    PopupService.prototype.close = function () {\n        if (this._windowRef) {\n            this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._windowRef.hostView));\n            this._windowRef = null;\n            if (this._contentRef.viewRef) {\n                this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._contentRef.viewRef));\n                this._contentRef = null;\n            }\n        }\n    };\n    PopupService.prototype._getContentRef = function (content, context) {\n        if (!content) {\n            return new ContentRef([]);\n        }\n        else if (content instanceof TemplateRef) {\n            var viewRef = this._viewContainerRef.createEmbeddedView(content, context);\n            return new ContentRef([viewRef.rootNodes], viewRef);\n        }\n        else {\n            return new ContentRef([[this._renderer.createText(\"\" + content)]]);\n        }\n    };\n    return PopupService;\n}());\nexport { PopupService };\n//# sourceMappingURL=popup.js.map \n",null]}